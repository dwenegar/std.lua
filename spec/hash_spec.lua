describe("#hash", function()
  local hash = require 'std.hash'
  it("should return the hash code of the value (none)", function()
    assert.are_equal(0, hash.hash())
  end)
  it("should return the hash code of the value (nil)", function()
    assert.are_equal(0, hash.hash(nil))
  end)
  it("should return the hash code of the value (boolean)", function()
    assert.are_equal(1, hash.hash(true))
    assert.are_equal(0, hash.hash(false))
  end)
  it("should return the hash code of the value (table)", function()
    assert.not_nil(hash.hash({}))
    assert.are_not_equal(hash.hash({}), hash.hash({}))
    local t = {}
    assert.are_equal(hash.hash(t), hash.hash(t))
  end)
  it("should return the hash code of the value (number)", function()
    assert.not_nil(hash.hash(1))
    assert.are_equal(hash.hash(1), hash.hash(1))
    assert.are_equal(1, hash.hash(1))
    assert.are_not_equal(1 << 33, hash.hash(1 << 33))
    assert.are_not_equal(math.maxinteger, hash.hash(math.maxinteger))
    assert.are_not_equal(math.mininteger, hash.hash(math.mininteger))
    assert.not_nil(hash.hash(1.0))
    assert.are_equal(hash.hash(1.1), hash.hash(1.1))
    assert.are_equal(1, hash.hash(1.0))
  end)
  it("should return the hash code of the value (string)", function()
    assert.not_nil(hash.hash(""))
    assert.are_equal(hash.hash("abc"), hash.hash("abc"))
    assert.are_not_equal(hash.hash("abc"), hash.hash("ab"))
  end)
  it("should return the hash code of the value (table)", function()
    local function h(x)
      local s = 0
      for _, v in ipairs(x) do
        s = s * 31 + 17 * hash.hash(v)
      end
      return s
    end
    local t1 = setmetatable({1, 2}, {__hash = h})
    local t2 = setmetatable({1, 2}, {__hash = h})
    assert.not_nil(hash.hash(t1))
    assert.are_equal(hash.hash(t1), hash.hash(t2))
    assert.are_equal(hash.hash(t1), hash.hash(t2))
    assert.are_equal(hash.hash(t1), hash.hash(t1))
  end)
end)
