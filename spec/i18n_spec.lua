describe("#i18n", function()
  local L, Ln = require 'std.i18n' {
    name = 'spec', mode = 'error'
  }
  describe("L", function()
    it("should report missing keys", function()
      assert.error(function() L("missing") end, [[missing key "missing"]])
    end)
    it("should return correctly for no args", function()
      assert.are_equal("Hello", L("Hello"))
    end)
    it("should return correctly with printf signature", function()
      assert.are_equal("Hello Taro", L("Hello %s", "Taro"))
    end)
    it("should return correctly with string interpolation", function()
      assert.are_equal("Hello Taro", L("Hello $name", {name = "Taro"}))
      assert.are_equal("Taro is 1.5m tall", L("$name is $height%.1fm tall", {name = "Taro", height = 1.5}))
    end)
    it("should return correctly with positional arguments", function()
      assert.are_equal("Hello Taro", L("Hello %1$s", "Taro"))
      assert.are_equal("Taro is 1.5m tall", L("%2$s is %1$.1fm tall", 1.5, "Taro"))
    end)
  end)
  describe("Ln", function()
    it("should return correctly for one", function()
      assert.are_equal("There is one monkey in the tree", Ln("There is one monkey in the tree", 1))
      assert.are_equal("There is one monkey in the tree", Ln("There is one monkey in the %s", 1, "tree"))
    end)
    it("should return correctly for three", function()
      assert.are_equal("There are 3 monkeys in the tree", Ln("There is one monkey in the tree", 3))
      assert.are_equal("There are 3 monkeys in the tree", Ln("There is one monkey in the %s", 3, "tree"))
    end)
  end)
end)
