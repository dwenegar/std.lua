local stringx = require 'std.stringx'

describe("#stringx", function()
  describe("chars", function()
    it("should return the characters of the input string", function()
      assert.same({}, stringx.chars(""))
      assert.same({"a", "b"}, stringx.chars("ab"))
    end)
  end)
  describe("find_last", function()
    it("should return the index of the last occurrence of the given substring", function()
      assert.same({5, 5}, {stringx.find_last("0123210", "2")})
      assert.same({3, 4}, {stringx.find_last("0123210", "23")})
      assert.same({5, 7}, {stringx.find_last("0123210", "2.0")})
      assert.same({}, {stringx.find_last("0123210", "2.0", 6)})
      assert.same({}, {stringx.find_last("0123210", "2.0", 1, true)})
    end)
    it("should not find the given pattern", function()
      assert.is_nil(stringx.find_last("123456789", "3%d*e"))
    end)
    it("should return the pattern captures", function()
      assert.same({3, 6, "2", "21"}, {stringx.find_last("0123210", "(2)3(21)")})
      assert.same({1, 7, "12", "4567"}, {stringx.find_last("1234567", "(%d+)3(%d+)")})
    end)
  end)
  describe("trim_left", function()
    it("should remove whitespace", function()
      assert.are_equal("not_space", stringx.trim_left("not_space"))
      assert.are_equal("not_space  ", stringx.trim_left("not_space  "))
      assert.are_equal("not_space  ", stringx.trim_left("  not_space  "))
      assert.are_equal("not_space", stringx.trim_left("  not_space"))
    end)
    it("should remove the given pattern", function()
      assert.are_equal("alpha", stringx.trim_left("1234alpha", "%d"))
      assert.are_equal("x00", stringx.trim_left("00x00", "0"))
      assert.are_equal("x00", stringx.trim_left("00x00", "%d"))
    end)
  end)
  describe("trim_right", function()
    it("should remove whitespace", function()
      assert.are_equal("not_space", stringx.trim_right("not_space"))
      assert.are_equal("not_space", stringx.trim_right("not_space  "))
      assert.are_equal("  not_space", stringx.trim_right("  not_space  "))
      assert.are_equal("  not_space", stringx.trim_right("  not_space"))
    end)
    it("should remove the given pattern", function()
      assert.are_equal("alpha", stringx.trim_right("alpha123", "%d"))
      assert.are_equal("00x", stringx.trim_right("00x00", "0"))
      assert.are_equal("00x", stringx.trim_right("00x00", "%d"))
    end)
  end)
  describe("trim", function()
    it("should remove whitespace", function()
      assert.are_equal("not_space", stringx.trim("not_space"))
      assert.are_equal("not_space", stringx.trim("  not_space  "))
      assert.are_equal("not_space", stringx.trim("not_space  "))
      assert.are_equal("not_space", stringx.trim("  not_space"))
    end)
    it("should remove the given pattern", function()
      assert.are_equal("alpha", stringx.trim("123alpha123", "%d"))
      assert.are_equal("x", stringx.trim("00x00", "0"))
      assert.are_equal("x", stringx.trim("00x00", "%d"))
    end)
  end)
  describe("each", function()
    it("should divide the string and process each part (sep=' ')", function()
      local n = 0
      local s = ""
      stringx.each("0 1 2 3", function(x)
        n = n + 1
        s = s .. x
      end)
      assert.are_equal(4, n)
      assert.are_equal("0123", s)
    end)
    it("should divide the string and process each part (sep=',')", function()
      local n = 0
      local s = ""
      stringx.each("0,1,2,3", ",", function(x)
        n = n + 1
        s = s .. x
      end)
      assert.are_equal(4, n)
      assert.are_equal("0123", s)
    end)
    it("should divide the string and process each part (max_count=2)", function()
      local n = 0
      local s = ""
      stringx.each("0,1,2,3", ",", 2, function(x)
        n = n + 1
        s = s .. x
      end)
      assert.are_equal(2, n)
      assert.are_equal("01", s)
    end)
  end)
  describe("split", function()
    it("should split the string", function()
      assert.same({"0", "1", "2"}, stringx.split("0 1 2"))
      assert.same({"0", "1", "2"}, stringx.split("0,1,2", ","))
      assert.same({"0", "1"}, stringx.split("0,1,2", ",", 2))
      assert.same({"0", "", "1", "", "2"}, stringx.split("0,,1,,2", ",", true))
    end)
  end)
  describe("starts_with", function()
    it("should return true if the string starts with the given pattern", function()
      assert.is_true(stringx.starts_with('01234', '0', true))
      assert.is_true(stringx.starts_with('01234', '%d'))
    end)
    it("should return false if the string does not start with the given pattern", function()
      assert.is_false(stringx.starts_with('01234', '12', true))
      assert.is_false(stringx.starts_with('01234', '[^%d]'))
    end)
  end)
  describe("ends_with", function()
    it("should return true if the string ends with the given pattern", function()
      assert.is_true(stringx.ends_with('01234', '4', true))
      assert.is_true(stringx.ends_with('01234', '%d'))
    end)
    it("should return false if the string does not end with the given pattern", function()
      assert.is_false(stringx.ends_with('01234', '12', true))
      assert.is_false(stringx.ends_with('01234', '[^%d]'))
    end)
  end)
  describe("partition", function()
    it("should partition the string according to the given pattern", function()
      assert.same({"head", ",", "mid,tail"}, {stringx.partition("head,mid,tail", ",", true)})
      assert.same({"head", ",", "mid,tail"}, {stringx.partition("head,mid,tail", ",")})
      assert.same({"a", "1", "b2c3d"}, {stringx.partition("a1b2c3d", "%d+")})
      assert.same({"not_sep"}, {stringx.partition("not_sep", "|")})
    end)
  end)
  describe("partition_right", function()
    it("should partition the string according to the given pattern", function()
      assert.same({"head,mid", ",", "tail"}, {stringx.partition_right("head,mid,tail", ",", true)})
      assert.same({"head,mid", ",", "tail"}, {stringx.partition_right("head,mid,tail", ",")})
      assert.same({"a1b2c", "3", "d"}, {stringx.partition_right("a1b2c3d", "%d+")})
      assert.same({nil, nil, "not_sep"}, {stringx.partition_right("not_sep", "|")})
    end)
  end)
  describe("translate", function()
    it("should translate the string according to the given strings", function()
      assert.is_nil(stringx.translate(nil))
      assert.are_equal("", stringx.translate(""))
      assert.are_equal("abc", stringx.translate("012", "210", "cba"))
      assert.are_equal("ab2", stringx.translate("012", "10", "ba"))
    end)
  end)
  describe("S", function()
    it("should format the string using the given values", function()
      assert.are_equal("x=1 a=one", stringx.S("x=$x a=$a", {x = 1, a = "one"}))
      assert.are_equal("x=$1 a=one$", stringx.S("x=$$x a=$a$", {x = 1, a = "one"}))
    end)
  end)
  describe("F", function()
    it("should format the string using the given values", function()
      assert.are_equal("x=1.0", stringx.F("x=$x%.1f", {x = 1}))
      assert.are_equal("x=1.0$", stringx.F("x=$x%.1f$", {x = 1}))
      assert.are_equal("x=$1.0", stringx.F("x=$$x%.1f", {x = 1}))
    end)
  end)
  describe("delete", function()
    it("should delete the given characters", function()
      assert.are_equal("abc", stringx.delete("0a1b2c", "0123456789", true))
      assert.are_equal("abc", stringx.delete("0a1b2c", "%d"))
    end)
  end)
  describe("squeeze", function()
    it("should remove all the runs of the given characters", function()
      assert.are_equal("0123", stringx.squeeze("00112233", "0123", true))
      assert.are_equal("0123", stringx.squeeze("00112233", "%d"))
      assert.are_equal("01aa23", stringx.squeeze("0011aa2233", "%d"))
    end)
  end)
  describe("insert", function()
    it("should insert the string at the specified position", function()
      assert.are_equal("01_23", stringx.insert("0123", "_", 3))
      assert.are_equal("_0123", stringx.insert("0123", "_"))
      assert.are_equal("0123_", stringx.insert("0123", "_", -1))
      assert.are_equal("01_23", stringx.insert("0123", "_", -2))
      assert.are_equal("0123", stringx.insert("0123", "", -2))
      assert.are_equal("0123", stringx.insert("0123", "_", 0))
      assert.are_equal("_0123", stringx.insert("0123", "_", 1))
    end)
  end)
  describe("each_line", function()
    it("should split the string into lines", function()
      local lines = {}
      stringx.each_line("one line", function(x)
        lines[#lines + 1] = x
      end)
      assert.are_equal(1, #lines)
      assert.are_equal("one line", lines[1])

      lines = {}
      stringx.each_line("first line\nsecond line", function(x)
        lines[#lines + 1] = x
      end)
      assert.are_equal(2, #lines)
      assert.are_equal("first line", lines[1])
      assert.are_equal("second line", lines[2])

      lines = {}
      stringx.each_line("first line\nsecond line", 1, function(x)
        lines[#lines + 1] = x
      end)
      assert.are_equal(1, #lines)
      assert.are_equal("first line", lines[1])
    end)
  end)
  describe("lines", function()
    it("should split the string into lines", function()
      local lines

      lines = stringx.lines("one line")
      assert.are_equal(1, #lines)
      assert.are_equal("one line", lines[1])

      lines = stringx.lines("first line\nsecond line")
      assert.are_equal(2, #lines)
      assert.are_equal("first line", lines[1])
      assert.are_equal("second line", lines[2])
    end)
  end)
  describe("center", function()
    it("should report bad arguments", function()
      assert.error(function() stringx.center(nil) end)
      assert.error(function() stringx.center("x", nil) end)
    end)
    it("should center the a string on a given width", function()
      assert.are_equal("  xx  ", stringx.center("xx", 6))
      assert.are_equal("  x   ", stringx.center("x", 6))
      assert.are_equal("  x  ", stringx.center("x", 5))
      assert.are_equal("123x123", stringx.center("x", 7, "123"))
      assert.are_equal("1231x1231", stringx.center("x", 9, "123"))
    end)
    it("should return the input string if the width is too small", function()
      assert.are_equal("xxxxxx", stringx.center("xxxxxx", 2))
    end)
    it("should center the a string on a given width using the given padding", function()
      assert.are_equal("==xx==", stringx.center("xx", 6, '='))
    end)
  end)
  describe("expand_tabs", function()
    it("should report bad arguments", function()
      assert.error(function()
        stringx.expand_tabs(nil)
      end)
    end)
    it("should replace tabs with the given number of spaces", function()
      assert.are_equal("        ", stringx.expand_tabs("\t"))
      assert.are_equal("  ", stringx.expand_tabs("\t", 2))
      assert.are_equal("    ", stringx.expand_tabs("\t\t", 2))
    end)
  end)
  describe("justify_right", function()
    it("should report bad arguments", function()
      assert.error(function()
        stringx.justify_right(nil)
      end)
      assert.error(function()
        stringx.justify_right("x", nil)
      end)
    end)
    it("should pad the string to the left up to the given width", function()
      assert.are_equal("    xx", stringx.justify_right("xx", 6))
      assert.are_equal("xx", stringx.justify_right("xx", 2))
    end)
    it("should return the input string if the width is too small", function()
      assert.are_equal("xxxxxx", stringx.justify_right("xxxxxx", 2))
    end)
    it("should pad the a string using the given padding", function()
      assert.are_equal("====xx", stringx.justify_right("xx", 6, '='))
      assert.are_equal("-=-xx", stringx.justify_right("xx", 5, '-='))
      assert.are_equal("-=-=xx", stringx.justify_right("xx", 6, '-='))
    end)
  end)
  describe("justify_left", function()
    it("should report bad arguments", function()
      assert.error(function()
        stringx.justify_left(nil)
      end)
      assert.error(function()
        stringx.justify_left("x", nil)
      end)
    end)
    it("should pad the string to the left up to the given width", function()
      assert.are_equal("xx    ", stringx.justify_left("xx", 6))
      assert.are_equal("xx", stringx.justify_left("xx", 2))
    end)
    it("should return the input string if the width is too small", function()
      assert.are_equal("xxxxxx", stringx.justify_left("xxxxxx", 2))
    end)
    it("should pad the a string using the given padding", function()
      assert.are_equal("xx====", stringx.justify_left("xx", 6, '='))
      assert.are_equal("xx-=-", stringx.justify_left("xx", 5, '-='))
      assert.are_equal("xx-=-=", stringx.justify_left("xx", 6, '-='))
    end)
  end)
  describe("wrap", function()
    it("should report bad arguments", function()
      assert.error(function()
        stringx.wrap(nil)
      end)
      assert.error(function()
        stringx.wrap("x", nil)
      end)
    end)
    it("should return the input string if the width is too small", function()
      assert.are_equal("xxxxxx", stringx.wrap("xxxxxx", 10))
    end)
    it("should return the wrapped input string", function()
      assert.are_equal("012356789\n012356789", stringx.wrap("012356789 012356789", 10))
      assert.are_equal("  012356789\n012356789", stringx.wrap("  012356789 012356789", 10))
      assert.are_equal("  0\n12\n345\n6789", stringx.wrap("  0 12 345 6789", 5))
    end)
  end)
  describe("format", function()
    it("should report mixed positional and not positional specifiers", function()
        assert.error(function() stringx.format("%d%1d", 1) end, "bad argument #1 to 'format' (invalid format)")
      end)
    describe("positional", function()
      it("should return the formatted string ", function()
        assert.are_equal("two 1", stringx.format("%2$s %1$d", 1, "two"))
        assert.are_equal("--- two 1 ---", stringx.format("--- %2$s %1$d ---", 1, "two"))
        assert.are_equal(" two   1", stringx.format("%2$4s%1$4d", 1, "two"))
      end)
    end)
    describe("not positional", function()
      it("should return the formatted string ", function()
        assert.are_equal("1 two", stringx.format("%d %s", 1, "two"))
      end)
    end)
  end)
  describe("escape", function()
    it("should escape the input string", function()
      assert.are_equal("\\a", stringx.escape("\a"))
      assert.are_equal("\\n", stringx.escape("\n"))
      assert.are_equal("\\r", stringx.escape("\r"))
      assert.are_equal("\\t", stringx.escape("\t"))
      assert.are_equal("\\f", stringx.escape("\f"))
      assert.are_equal("\\v", stringx.escape("\v"))

      assert.are_equal("\\\\a", stringx.escape("\\a"))
      assert.are_equal("\\\\n", stringx.escape("\\n"))
      assert.are_equal("\\\\r", stringx.escape("\\r"))
      assert.are_equal("\\\\t", stringx.escape("\\t"))
      assert.are_equal("\\\\f", stringx.escape("\\f"))
      assert.are_equal("\\\\v", stringx.escape("\\v"))

      assert.are_equal("\\\\a\\a", stringx.escape("\\a\a"))
      assert.are_equal("a\\tb", stringx.escape("a\tb"))
    end)
  end)
  describe("unescape", function()
    it("should unescape the input string", function()
      assert.are_equal("\a", stringx.unescape("\\a"))
      assert.are_equal("\n", stringx.unescape("\\n"))
      assert.are_equal("\r", stringx.unescape("\\r"))
      assert.are_equal("\t", stringx.unescape("\\t"))
      assert.are_equal("\f", stringx.unescape("\\f"))
      assert.are_equal("\v", stringx.unescape("\\v"))

      assert.are_equal("\\a", stringx.unescape("\\\\a"))
      assert.are_equal("\\n", stringx.unescape("\\\\n"))
      assert.are_equal("\\r", stringx.unescape("\\\\r"))
      assert.are_equal("\\t", stringx.unescape("\\\\t"))
      assert.are_equal("\\f", stringx.unescape("\\\\f"))
      assert.are_equal("\\v", stringx.unescape("\\\\v"))

      assert.are_equal("\\\n", stringx.unescape("\\\\\\n"))
      assert.are_equal("a\ta", stringx.unescape("a\\ta"))
    end)
  end)
end)
