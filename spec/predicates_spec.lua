local predicates = require 'std.predicates'

describe("#predicates", function()
  it("is_number", function()
    assert.is_true(predicates.is_number(1))
    assert.is_true(predicates.is_number(1.0))
    assert.is_false(predicates.is_number("1"))
    assert.is_false(predicates.is_number({}))
  end)
  it("is_integer", function()
    assert.is_true(predicates.is_integer(0))
    assert.is_true(predicates.is_integer(1))
    assert.is_false(predicates.is_integer(1.0))
    assert.is_false(predicates.is_integer("1"))
  end)
  it("is_string", function()
    assert.is_true(predicates.is_string("abc"))
    assert.is_false(predicates.is_string(1.0))
  end)
  it("is_table", function()
    assert.is_true(predicates.is_table({}))
    assert.is_false(predicates.is_table("t"))
  end)
  it("is_function", function()
    assert.is_true(predicates.is_function(function() end))
    assert.is_false(predicates.is_function("f"))
  end)
  it("is_nil", function()
    assert.is_true(predicates.is_nil(nil))
    assert.is_false(predicates.is_nil("f"))
  end)
  it("is_thread", function()
    assert.is_true(predicates.is_thread(coroutine.create(function() end)))
    assert.is_false(predicates.is_thread("f"))
  end)
  it("is_boolean", function()
    assert.is_true(predicates.is_boolean(true))
    assert.is_true(predicates.is_boolean(false))
    assert.is_false(predicates.is_boolean("true"))
  end)
  it("gt", function()
    local gt = predicates.gt(0)
    assert.is_true(gt(1))
    assert.is_false(gt(0))
    assert.is_false(gt(-1))
  end)
  it("ge", function()
    local ge = predicates.ge(0)
    assert.is_true(ge(1))
    assert.is_true(ge(0))
    assert.is_false(ge(-1))
  end)
  it("lt", function()
    local lt = predicates.lt(0)
    assert.is_true(lt(-1))
    assert.is_false(lt(0))
    assert.is_false(lt(1))
  end)
  it("le", function()
    local le = predicates.le(0)
    assert.is_true(le(-1))
    assert.is_true(le(0))
    assert.is_false(le(1))
  end)
  it("eq", function()
    local eq = predicates.eq(0)
    assert.is_true(eq(0))
    assert.is_false(eq(1))
  end)
  it("neq", function()
    local neq = predicates.neq(0)
    assert.is_true(neq(1))
    assert.is_false(neq(0))
  end)
  it("always", function()
    local always0 = predicates.always(0)
    assert.are_equal(0, always0())
    assert.are_equal(0, always0())
  end)
end)
